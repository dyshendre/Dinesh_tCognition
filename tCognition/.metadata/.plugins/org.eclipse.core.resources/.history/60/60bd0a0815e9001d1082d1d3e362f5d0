package com.tCognition;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class Demo {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		System.out.println("sum is: "+add("//[|||][|^&]\n1|||2|||3|^&4|||5"));
	    }
	
	/*1. A StringCalculator with a method Add(string givenString) that returns an integer.*/
	
	
	
	    public static int add(String givenString) {
	    	String[] givenStringArr=givenString.split("");
	        if (givenString.isEmpty()) {
	            return 0;
	        } 
	            String delimiter = ",";
	            String number=givenString;
	            if (givenString.startsWith("//")) {
	                int delimiterIndex = givenString.indexOf("\n");
	                delimiter = givenString.substring(2, delimiterIndex);
	                number = givenString.substring(delimiterIndex+ 1);
	                
	            }
	            
	            number = number.replaceAll("\n", delimiter);
	            
	            System.out.println("delimiter is: "+delimiter);
                System.out.println("number is: "+number);
                String[] numArr;
                
 /*4.	Allow the Add method to handle a different delimiter:
  			Example: "//;\n1;2" returns 3 (the delimiter is ";").*/
                if(!givenStringArr[2].equals("["))
                {
                	 numArr = number.split(delimiter);
                }
                

/*
	7.	Delimiters can be any length, using this syntax: "//[|||]\n1|||2|||3" returns 6.
	8.	Allow multiple delimiters, using this syntax: "//[|][%]\n1|2%3" returns 6.
	9.	Handle multiple delimiters of any length.
*/
                else  {
                	String[] delimiterArr=delimiter.split("");
                    List<Integer> list=new ArrayList<>();
            		for(int i=0;i<givenStringArr.length;i++)
            		{
            			if(givenStringArr[i].equals("[") || givenStringArr[i].equals("]"))
            			{
            				list.add(i);
            			}
            			
            		}
//            		System.out.println(list);
            		List<String> list2=new ArrayList<>();

            		for(int i=0;i<list.size();i=i+2)
            		{
            			list2.add(givenString.substring(list.get(i)+1,list.get(i+1)));
            		}
            		
            		for(String delimiter2:list2)
            		{
            			number=number.replace(delimiter2,",");
            		}
            		
            		numArr=number.split(",");
            		System.out.println("numArr: "+Arrays.toString(numArr));	               
                    
                }
                
            
	            int sum = 0;
	            List<Integer> negatives = new ArrayList<>();
	            for (String element : numArr) {
	            	if(element.equals(""))
	            	{
	            		sum=sum+0;
	            	}
	            	else {
	            		int value=Integer.parseInt(element);
	            		if (value < 0) 
	            		{
	            			negatives.add(value);
	            		} 
/*
	6.	Numbers greater than 1000 should be ignored.
*/
	            		else if(value<=1000) 
	            		{
	            			sum=sum+ value;
	            		}
	            	}
	            }
/*
5.	Calling Add with a negative number will throw an exception "Negatives not allowed: " and 
then listing all negative numbers that were in the list of numbers.
	i.	Example: "-1,2" throws "Negatives not allowed: -1".
	ii.	Example: "2,-4,3,-5" throws "Negatives not allowed: -4,-5".
*/
	            if(!negatives.isEmpty()) {
	                String msg="Negative numbers are not allowed: ";
	                for (int i =0; i<negatives.size(); i++) {
	                    if (i > 0) 
	                    {
	                        msg += ",";
	                    }
	                    msg+= negatives.get(i);
	                }
	                throw new IllegalArgumentException(msg);
	            }
	            return sum;
	        
	    }
	

	    
	    }




